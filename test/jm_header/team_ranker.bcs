#if 1

#library "teamrank"

#include "zcommon.h"
#include "config.h"
#include "utility.h"
#include "timer.h"
#include "team_ranker.h"
#include "hs.h"
#include "luk.h"

// ==========================================================================
strict namespace Jm.TeamRanker {
// ==========================================================================

using Jm.Cfg;
using Jm.Utility: ZeroPad;

enum { MAX_POINTS = 10 };
enum { SHOW_DELAY_TIME = 16 };
enum : fixed { TBL_X = 0.0038147 };
enum : fixed { TBL_Y = 0.688171 };
enum { TBL_START_POSITION = 52000 };
enum { TBL_PLACE_HEIGHT = 1000 };
enum { TBL_REFRESH_TIME = 8 }; // In seconds
enum { TBL_LINEID_OFFSET = 960 };
enum { HS_LINE = ( TBL_LINEID_OFFSET + 2 + MAX_POINTS ) };

private struct {
   struct SpotT {
      int player;
      int points;
   } spots[ MAX_POINTS ];
   int size;
} gTable;
private int gPointsLeft = MAX_POINTS;
private int gPointsTotal = MAX_POINTS;
private int gMinutes;
private int gSeconds;
private int gCentiseconds;
private str gEndMessage;

script "TeamRanker.Start" ( int points ) {
   if ( points <= MAX_POINTS ) {
      gPointsLeft = points;
      gPointsTotal = points;
   }
   if ( Utility.IsOnline() ) {
      if ( Hs.IsEnabled() ) {
         Hs.gLoadScript = "TeamRanker.LoadHs";
         Hs.gDetailsScript = "TeamRanker.ShowHs";
         Acs_NamedExecuteWait( "TeamRanker.LoadHs", 0 );
      }
      while ( true ) {
         ShowTable();
         Delay( Cfg.TICS_IN_SECOND * TBL_REFRESH_TIME );
      }
   } 
   else {
      ShowGoals();
   }
}

script "TeamRanker.AddPoint" {
   if ( gPointsLeft > 0 ) {
      AddPointToPlayer( PlayerNumber() );
      if ( ! gPointsLeft ) {
         auto time = Jm.Timer.GetTics();
         SetFinishTime( time );
         if ( Hs.IsEnabled() && Hs.IsNew( time ) ) {
            if ( ! Hs.IsCheatsEnabled() ) {
               SaveHs( time );
               AnnounceHs();
               Acs_NamedExecuteWait( "TeamRanker.LoadHs", 0 );
            }
            else {
               AnnounceCheat();
            }
         }
      }
      Delay( SHOW_DELAY_TIME );
      if ( Utility.IsOnline() ) {
         ShowTable();
      }
      else {
         ShowGoals();
      }
   }
}

private void AddPointToPlayer( int player ) {
   auto spot = FindSpot( player );
   if ( ! spot ) {
      spot = gTable.spots[ gTable.size ];
      spot.player = player;
      ++gTable.size;
   }
   ++spot.points;
   --gPointsLeft;
}

private SpotT? FindSpot( int player ) {
   for ( auto i = 0; i < gTable.size; ++i ) {
      if ( gTable.spots[ i ].player == player ) {
         return gTable.spots[ i ];
      }
   }
   return null;
}

private void SetFinishTime( int tics ) {
   gMinutes = tics / TICS_IN_SECOND / 60;
   gSeconds = tics / TICS_IN_SECOND % 60;
   gCentiseconds = Utility.CalCseconds( tics % TICS_IN_SECOND );
}

private bool IsSpotActive( int spot ) {
   return ( gTable.spots[ spot ].player != Cfg.VALUE_NONE );
}

script "TeamRanker.ClientQuit" ( int player ) disconnect {
   if ( auto spot = FindSpot( player ) ) {
      spot.player = VALUE_NONE;
      Delay( SHOW_DELAY_TIME );
      ShowTable();
   }
}

private void ShowTable() {
   SetFont( "SMALLFONT" );
   buildmsg ( HudMessageBold(
      HUDMSG_PLAIN, TBL_LINEID_OFFSET, 0, TBL_X, TBL_Y, 0.0 ) ) {
      if ( Hs.IsSet() ) {
         CreateHsTimeMessage();
         append( s: "\n\n" );
      }
      if ( gPointsLeft == 0 ) {
         append( s: CreateTimeMessage() );
         append( s: "\n\n" );
      }
      append( s : "\cfMain Helpers", s: "\n\n" );
      for ( auto i = 0; i < gTable.size; ++i ) {
         if ( gTable.spots[ i ].player != VALUE_NONE ) {
            append( s: "\cc", n: gTable.spots[ i ].player + 1, s: " \cd",
               d: gTable.spots[ i ].points );
         }
         else {
            append( s: "\cgDisconnected", s: " \cd",
               d: gTable.spots[ i ].points );
         }
      }
   }
}

private str CreateTimeMessage() {
   return buildmsg ( StrParam() ) {
      // Custom end message.
      if ( gEndMessage ) {
         append( s: "\ci", s: gEndMessage );
      }
      else {
         append( s: Utility.IsOnline() ? "\ciTeamtime: " : "\crTime: ", s: "\cb",
            s: ZeroPad( gMinutes ), d: gMinutes, s: ":",
            s: ZeroPad( gSeconds ), d: gSeconds, s: "\cs.",
            s: ZeroPad( gCentiseconds ), d: gCentiseconds );
      }
   }
}

private void ShowGoals() {
   SetFont( "SMALLFONT" );
   buildmsg ( HudMessage(
      HUDMSG_PLAIN, TBL_LINEID_OFFSET, 0, TBL_X, TBL_Y, 0.0 ) ) {
      if ( gPointsLeft == 0 ) {
         append( s: CreateTimeMessage() );
      }
      append( s: "\n\n" );
      auto labelColor = ( gPointsLeft == 0 ) ? "\cd" : "\cc";
      auto pointColor = ( gPointsLeft == 0 ) ? "\cq" : "\ck";
      auto totalColor = ( gPointsLeft == 0 ) ? "\cq" : "\ci";
      // Even though there likely won't be any maps that will contain one
      // point, we'll still choose the appropriate label based on the quantity
      // of the points.
      auto label = ( gPointsTotal == 1 ) ? "Goal" : "Goals";
      append( s: labelColor, s: label, s: ": ", s: pointColor,
         // For single player, there's only one player playing and therefore
         // always one place taken in the score table, which will be the first.
         d: gTable.spots[ 0 ].points, s: labelColor, s: " / ", s: totalColor,
         d: gPointsTotal );
   }
}

void ClearPointsTable() {
   // Clear all posssible player places and the table header with the finish
   // time.
   auto linesToClear = MAX_POINTS + 2;
   for ( auto i = 0; i < linesToClear; ++i ) {
      Utility.ClearMessage( TBL_LINEID_OFFSET + i );
   }
}

// High Score (luk-specific functions and scripts)
// ---------------------------------------------------------------------------

// luk database record keys.
enum : str { HS_RTIME = "jrt_hs_time" };
enum : str { HS_RPLAYER_PREFIX = "jrt_hs_helper" };
enum : str { HS_RPOINTS_PREFIX = "jrt_hs_points" };
enum : str { HS_RTOTAL_PLAYERS = "jrt_hs_total_players" };
enum : str { HS_RDATE = "jrt_hs_rdate" };
enum : fixed { HS_TBL_X = -1.75 };
enum : fixed { HS_TBL_Y = 0.7 };
enum { HS_TBL_LINE = Hs.LINE_NOTICE };

private int gHsMinutes;
private int gHsSeconds;
private int gHsCentiseconds;
private int gHsHelpersTotal;
private str gHsHelpersName[ MAX_POINTS ];
private int gHsHelpersPoints[ MAX_POINTS ];
private int gHsUnaccountedPoints;
private int gHsYear;
private int gHsMonth;
private int gHsDay;

script "TeamRanker.LoadHs" {
   Hs.gLoadStatus = Hs.STATUS_WORKING;
   // Load finish time.
   Acs_ExecuteWait( Luk.RETSCRIPT, 0, Luk.RETQUERY_INT, HS_RTIME );
   if ( Luk.gQueryResult != Luk.RESULT_OK ) {
      // No high score is set.
      if ( Luk.gQueryResult == Luk.RESULT_FAILED ) {
         Hs.gLoadStatus = Hs.STATUS_LOADED;
      }
      // Loading error.
      else {
         Hs.gLoadStatus = Hs.STATUS_ERROR;
      }
      terminate;
   }
   SetHsFinishTime( Luk.gData );
   // Load date.
   Acs_ExecuteWait( Luk.RETSCRIPT, 0, Luk.RETQUERY_DATE, HS_RDATE );
   if ( Luk.gQueryResult != Luk.RESULT_OK ) {
      Hs.gLoadStatus = Hs.STATUS_ERROR;
      terminate;
   }
   gHsYear = Luk.gYear;
   gHsMonth = Luk.gMonth;
   gHsDay = Luk.gDay;
   // Load total helpers.
   Acs_ExecuteWait( Luk.RETSCRIPT, 0, Luk.RETQUERY_INT, HS_RTOTAL_PLAYERS );
   if ( Luk.gQueryResult != Luk.RESULT_OK ) {
      Hs.gLoadStatus = Hs.STATUS_ERROR;
      terminate;
   }
   gHsHelpersTotal = Luk.gData;
   // Load name and points of each helper.
   auto pointsCollected = 0;
   for ( auto i = 0; i < gHsHelpersTotal; ++i ) {
      Acs_ExecuteWait( Luk.RETSCRIPT, 0, Luk.RETQUERY_STR, 
         HS_RPLAYER_PREFIX + str( i + 1 ) );
      if ( Luk.gQueryResult != Luk.RESULT_OK ) {
         Hs.gLoadStatus = Hs.STATUS_ERROR;
         terminate;
      }
      gHsHelpersName[ i ] = StrParam( a: Luk.gString );
      Acs_NamedExecuteWait( "Luk.Retrieve", 0, Luk.RETQUERY_INT, 
         HS_RPOINTS_PREFIX + str( i + 1 ) );
      if ( Luk.gQueryResult != Luk.RESULT_OK ) {
         Hs.gLoadStatus = Hs.STATUS_ERROR;
         terminate;
      }
      gHsHelpersPoints[ i ] = Luk.gData;
      pointsCollected += gHsHelpersPoints[ i ];
   }
   gHsUnaccountedPoints = gPointsTotal - pointsCollected;
   Hs.gLoadStatus = Hs.STATUS_LOADED;
}

private void SetHsFinishTime( int tics ) {
   if ( tics > 0 ) {
      gHsMinutes = tics / Cfg.TICS_IN_SECOND / 60;
      gHsSeconds = tics / Cfg.TICS_IN_SECOND % 60;
      gHsCentiseconds = Utility.CalCseconds( tics % Cfg.TICS_IN_SECOND );
      Hs.SetFinishTime( tics );
   }
}

// Saves map run information as high score in permanent storage.
private void SaveHs( int finishTime ) {
   Luk.StoreInt( HS_RTIME, finishTime );
   Luk.StoreDate( HS_RDATE );
   auto numConnected = 0;
   for ( auto i = 0; i < gTable.size; ++i ) {
      auto spot = gTable.spots[ i ];
      if ( spot.player != VALUE_NONE ) {
         Luk.StoreStr( HS_RPLAYER_PREFIX + str( numConnected + 1 ),
            StrParam( n: spot.player + 1 ) );
         Luk.StoreInt( HS_RPOINTS_PREFIX + str( numConnected + 1 ),
            spot.points );
         ++numConnected;
      }
   }
   Luk.StoreInt( HS_RTOTAL_PLAYERS, numConnected );
}

private str CreateHsTimeMessage() {
   return buildmsg ( StrParam() ) {
      append( s: "\cnRecord: \cb",
         s: ZeroPad( gHsMinutes ), d: gHsMinutes, s: ":",
         s: ZeroPad( gHsSeconds ), d: gHsSeconds, s: "\cs.",
         s: ZeroPad( gHsCentiseconds ), d: gHsCentiseconds );
   }
}

private void AnnounceHs() {
   SetFont( "SMALLFONT" );
   HudMessageBold( s: "\cdA new map record has been set!"; HUDMSG_FADEOUT |
      HUDMSG_LOG, 1900, 0, 1.5, 0.14, 5.0, 1.0 );
   AmbientSound( "JM2HSWIN", 127 );
}

private void AnnounceCheat() {
   SetFont( "SMALLFONT" );
   HudMessageBold( s: "\ccThis team of super marines is beyond the high "
      "score"; HUDMSG_FADEOUT | HUDMSG_LOG, 1900, 0, 1.5, 0.15, 5.0, 1.0 );
   AmbientSound( "JM2HSLOS", 127 );
}

// Prints high score details table.
script "TeamRanker.ShowHs" ( raw showTime ) {
   SetFont( "SMALLFONT" );
   buildmsg ( HudMessage(
      HUDMSG_FADEOUT, HS_TBL_LINE, 0, HS_TBL_X, HS_TBL_Y, showTime, 1.0 ) ) {
      append( s: "\ciRecord details", s: "\n\n", s: "\ckDate Set:", s: "\n",
         s: "\cc", s: Utility.GetMonthName( gHsMonth ), s: " ", d: gHsDay,
         s: ", ", d: gHsYear, s: "\n\n", s: "\ckFinish Time:", s: "\n",
         s: "\cb", s: ZeroPad( gHsMinutes ), d: gHsMinutes, s: ":",
         s: ZeroPad( gHsSeconds ), d: gHsSeconds, s: "\cs.",
         s: ZeroPad( gHsCentiseconds ), d: gHsCentiseconds, s: "\n\n",
         s: "\ckMain Helpers:", s: "\n" );
      for ( auto helper = 0; helper < gHsHelpersTotal; ++helper ) {
         append( s: "\cc", s: gHsHelpersName[ helper ], s: " \cd",
            d: gHsHelpersPoints[ helper ], s: "\n" );
      }
      if ( gHsUnaccountedPoints > 0 ) {
         append( s: "\cgUnaccounted \cd", d: gHsUnaccountedPoints );
      }
   }
}

void PrepareForSvmz() {
   gEndMessage = "Maze Complete";
}

}

#endif
