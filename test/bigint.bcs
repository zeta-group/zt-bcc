/*

   NOTE: Restrictions on operands:

   - Must be positive.
   - Leading zeroes not allowed.

*/

#include "zcommon.h"

// ==========================================================================
strict namespace {
// ==========================================================================

script "Main" open {
   str a = StrParam( d: INT_MAX );
   str b = StrParam( d: INT_MAX - 1000'000'000 );
   Print( i: BigInt.Lt( a, b ) );
   Print( s: BigInt.Add( a, b ) );
   Print( s: BigInt.Sub( a, b ) );
}

}

// ==========================================================================
strict namespace BigInt {
// ==========================================================================

str Add( str a, str b ) {
   return buildmsg ( StrParam() ) {
      // Calculate sum.
      str sum = ( auto() ) {
         return buildmsg ( StrParam() ) {
            int i_a = a.length() - 1;
            int i_b = b.length() - 1;
            int carry = 0;
            while ( i_a >= 0 || i_b >= 0 ) {
               int sum = ( i_a >= 0 ? a[ i_a ] - '0' : 0 ) +
                  ( i_b >= 0 ? b[ i_b ] - '0' : 0 ) + carry;
               append( d: sum - ( int( sum >= 10 ) * 10 ) );
               carry = int( sum >= 10 );
               --i_a;
               --i_b;
            }
            append( c: carry * '1' );
         }
      }();
      // Output sum.
      int i = sum.length() - 1;
      while ( i >= 0 ) {
         append( c: sum[ i ] );
         --i;
      }
   }
}

str Sub( str a, str b ) {
   return buildmsg ( StrParam() ) {
      // Negative.
      if ( Lt( a, b ) ) {
         append( c: '-' );
         str temp_a = a;
         a = b;
         b = temp_a;
      }
      // Calculate difference.
      str diff = ( auto() ) {
         return buildmsg ( StrParam() ) {
            int i_a = a.length() - 1;
            int i_b = b.length() - 1;
            int borrow = 0;
            while ( i_a >= 0 || i_b >= 0 ) {
               int digit_a = ( i_a >= 0 ? a[ i_a ] - '0' : 0 );
               int digit_b = ( i_b >= 0 ? b[ i_b ] - '0' : 0 );
               append( d: ( digit_a - borrow ) +
                  ( int( digit_a - borrow < digit_b ) * 10 ) - digit_b );
               borrow = int( digit_a - borrow < digit_b );
               --i_a;
               --i_b;
            }
         }
      }();
      // Output difference.
      int i = diff.length() - 1;
      while ( i >= 1 && diff[ i ] == '0' ) {
         --i;
      }
      while ( i >= 0 ) {
         append( c: diff[ i ] );
         --i;
      }
   }
}

bool Lt( str a, str b ) {
   int length = b.length();
   if ( a.length() == length ) {
      int i = 0;
      while ( i < length && a[ i ] < b[ i ] ) {
         ++i;
      }
      return ( i == length );
   }
   else {
      return ( a.length() < length );
   }
}

}
